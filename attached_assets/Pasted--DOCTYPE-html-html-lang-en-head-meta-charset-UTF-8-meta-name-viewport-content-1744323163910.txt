<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>2D Platformer</title>
    <link href="https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap" rel="stylesheet">
    <style>
        body {
            margin: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            background-color: #111;
            font-family: 'Press Start 2P', cursive;
            overflow: hidden; /* Prevent scrollbars */
        }

        .container {
            width: 100%;
            max-width: 800px; /* Adjust as needed */
            box-sizing: border-box;
            position: relative; /* For absolute positioning of elements inside */
        }

        #gameCanvas {
          background: #000;
          display: block;
          width: 100%; /* Canvas will take the full width of the container */
          height: auto;
          max-height: 600px; /* Max height to maintain aspect ratio and prevent it from being too large*/
          aspect-ratio: 8 / 6;
        }

        .game-over-overlay {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.8);
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            color: white;
            font-size: 1.5rem;
            z-index: 10;
            display: none; /* Initially hidden */
        }

        .game-over-content {
          border: 4px solid #f00;
          padding: 16px;

        }

        #restartButton, .difficulty-button, #toggleSoundButton {
            margin-top: 20px;
            padding: 10px 20px;
            font-size: 1rem;
            color: white;
            background-color: #4CAF50;
            border: none;
            cursor: pointer;
            border-radius: 5px;
            font-family: 'Press Start 2P', cursive;
            transition: background-color 0.3s;
            margin: 4px;
        }
        #toggleSoundButton {
            background-color: #007bff;
        }

        #restartButton:hover, .difficulty-button:hover, #toggleSoundButton:hover {
            background-color: #367c39;
        }

        .difficulty-buttons {
            display: flex;
            justify-content: center;
            margin-bottom: 4px;
        }

        .difficulty-button.active {
            background-color: #e65100;
        }

        #gameWonOverlay {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.8);
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            color: white;
            font-size: 1.5rem;
            z-index: 10;
            display: none; /* Initially hidden */
        }

        #gameWonOverlayContent {
          border: 4px solid #0f0;
          padding: 16px;
        }

        .instructions-box {
          position: absolute;
          top: 50%;
          left: 50%;
          transform: translate(-50%, -50%);
          background-color: rgba(0, 0, 0, 0.9);
          border: 4px solid #3b82f6;
          padding: 1rem;
          color: #fff;
          z-index: 11;
          text-align: center;
          border-radius: 8px;
          max-width: 80%;
        }

        .instructions-box h2 {
          font-size: 1.2rem;
          margin-bottom: 0.5rem;
          color: #ffdb58;
        }
        .instructions-box p{
            font-size: 0.6rem;
            margin-bottom: 0.5rem;

        }

        .instructions-box ul {
          list-style: none;
          padding: 0;
          margin-bottom: 1rem;
            font-size: 0.6rem;

        }

        .instructions-box li {
          margin-bottom: 0.25rem;
            font-size: 0.6rem;

        }

        .instructions-box button {
          padding: 0.5rem 1rem;
          background-color: #3b82f6;
          color: #fff;
          font-family: 'Press Start 2P', cursive;
          border-radius: 0.375rem;
          cursor: pointer;
          transition: background-color 0.3s ease;
          font-size: 0.75rem;
          border: none;
        }

        .instructions-box button:hover {
          background-color: #2563eb;
        }
        @media (min-width: 640px) {
        .instructions-box h2 {
            font-size: 1.5rem;
        }
        .instructions-box ul {
            font-size: 0.8rem;

        }
        .instructions-box p{
                font-size: 0.8rem;
        }

        .instructions-box li {
          margin-bottom: 0.25rem;
              font-size: 0.8rem;

        }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="difficulty-buttons">
            <button class="difficulty-button" data-difficulty="easy">Easy</button>
            <button class="difficulty-button" data-difficulty="medium">Medium</button>
            <button class="difficulty-button" data-difficulty="hard">Hard</button>
        </div>
        <button id="toggleSoundButton">Toggle Sound</button>

        <canvas id="gameCanvas"></canvas>

        <div class="game-over-overlay">
            <div class = "game-over-content">
                <h2>Game Over</h2>
                <p>You were defeated by the waves.</p>
                <button id="restartButton">Restart</button>
            </div>
        </div>
        <div id="gameWonOverlay" style="display:none;">
            <div id = "gameWonOverlayContent">
                <h2>Congratulations!</h2>
                <p>You have defeated the final boss and won the game!</p>
                <button id="restartButtonWin">Restart</button>
            </div>
        </div>
        <div class="instructions-box" id="instructions">
          <h2>How to Play</h2>
          <ul>
            <li>Use the left and right arrow keys to move your character.</li>
            <li>Press the up arrow key to jump.</li>
            <li>Defeat all enemies in a wave to advance to the next wave.</li>
            <li>Survive all waves and defeat the final boss to win!</li>
            <li>Select a difficulty level before starting.</li>
          </ul>
            <p>Good luck, Survivor!</p>

          <button id="close-instructions">Got it!</button>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/tone@14.7.77/build/Tone.min.js"></script>
    <script>
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');
        const gameOverOverlay = document.querySelector('.game-over-overlay');
        const restartButton = document.getElementById('restartButton');
        const difficultyButtons = document.querySelectorAll('.difficulty-button');
        const gameWonOverlay = document.getElementById('gameWonOverlay');
        const restartButtonWin = document.getElementById('restartButtonWin');
        const toggleSoundButton = document.getElementById('toggleSoundButton');
        const instructionsBox = document.getElementById('instructions');
        const closeInstructionsButton = document.getElementById('close-instructions');

        let dimensions = { width: 800, height: 600 }; // Default dimensions
        const updateDimensions = () => {
              const containerElement = document.querySelector('.container');
              const width = Math.min(containerElement.clientWidth, 800); // Max width of 800
              const height = width * 0.75; // Maintain aspect ratio
              dimensions = { width, height };

              canvas.width = dimensions.width;
              canvas.height = dimensions.height;
            };

        updateDimensions();
        const resizeObserver = new ResizeObserver(updateDimensions);
        resizeObserver.observe(document.querySelector('.container'));
        window.addEventListener('resize', updateDimensions);


        let player;
        let enemies = [];
        let platforms = [];
        let gameRunning = false;
        let animationId;
        let difficulty = 'medium';  // Default difficulty
        let wave = 1;
        let score = 0;
        let isSoundEnabled = false;
        let bossFight = false; // Flag to indicate boss fight
        let gameWon = false;
        let bullets = []; // Array to hold player's bullets
        let bulletSpeed = 7;
        let bulletDamage = 20;
        let enemySpawnInterval = 1000; // Initial enemy spawn interval in milliseconds


        // --- Sound Effects (Tone.js) ---
        const jumpSynth = new Tone.Synth().toDestination();
        const attackSynth = new Tone.Synth().toDestination();
        const hitSynth = new Tone.MembraneSynth().toDestination();
        const deathSynth = new Tone.FMSynth().toDestination();
        const waveClearSynth = new Tone.PluckSynth().toDestination();
        const gameOverSynth = new Tone.AMSynth().toDestination();
        const gameWonSynth = new Tone.PluckSynth().toDestination();

        // --- Helper Functions ---

        function random(min, max) {
            return Math.floor(Math.random() * (max - min + 1)) + min;
        }

        // Check for collision between two rectangles
        function checkCollision(rect1, rect2) {
            return rect1.x < rect2.x + rect2.width &&
                   rect1.x + rect1.width > rect2.x &&
                   rect1.y < rect2.y + rect2.height &&
                   rect1.y + rect1.height > rect2.y;
        }

        // --- Game Object Creation ---

        function createPlayer() {
            return {
                x: 50,
                y: dimensions.height - 100,
                width: 30,
                height: 30,
                speed: 5,
                velocityY: 0,
                gravity: 0.5,
                isJumping: false,
                color: '#42a5f5', // Blue
                attackDamage: 10, // Initial attack damage
                health: 100
            };
        }

        function createPlatform(x, y, width, height, color = '#8d6e63') { // Brown
            return {
                x,
                y,
                width,
                height,
                color,
                isMoving: false, // New property for moving platforms
                direction: 1,    // 1 for right/down, -1 for left/up
                moveSpeed: 1,
                originalX: x,  // Store original X for resetting
                originalY: y
            };
        }

        function createEnemy(x, y, width, height, color, speed, health, damage) {
          return {
            x,
            y,
            width,
            height,
            color,
            speed,
            health,
            damage, // New property for enemy damage
            isAlive: true,
            type: 'basic', // Add a type property, default is basic.
            attackDamage: damage
          };
        }

        function createBoss(x, y, width, height, color, speed, health, damage, attackDamage, attackSpeed) {
            return {
                x,
                y,
                width,
                height,
                color,
                speed,
                health,
                damage,
                attackDamage, // Boss-specific attack damage
                attackSpeed,     // Boss-specific attack speed (attacks per second)
                isAlive: true,
                type: 'boss',    // Type for boss
                attackTimer: 0,     // Timer to track when the boss can attack
                projectileColor: '#ff4500', // Boss projectile color
                projectileWidth: 10,
                projectileHeight: 10,
                projectiles: [] // Array to hold boss projectiles
            };
        }

        // --- Enemy Spawning ---
        function spawnEnemy() {
            let x = dimensions.width + 50;
            let y = dimensions.height - 50;
            let width = 20;
            let height = 20;
            let color = '#f44336'; // Red
            let speed = random(1, 3);
            let health = 20;
            let damage = 10;

             if (wave > 3) {
                if (Math.random() < 0.2) {  // 20% chance
                    width = 30;
                    height = 30;
                    speed = random(2, 4);
                    health = 40;
                    damage = 15;
                    color = '#ff8f00'; // Darker Orange
                }
            }
            if (wave > 5) {
                 if (Math.random() < 0.3) {  // 30% chance
                    width = 40;
                    height = 40;
                    speed = random(3, 5);
                    health = 60;
                    damage = 20;
                    color = '#d84315';  //even darker red
                }
            }

            let newEnemy = createEnemy(x, y, width, height, color, speed, health, damage);
            enemies.push(newEnemy);
        }

        function spawnBoss() {
            const bossX = dimensions.width - 100;
            const bossY = dimensions.height - 150;
            const bossWidth = 80;
            const bossHeight = 80;
            const bossColor = '#9c27b0';  // Purple
            const bossSpeed = 1;         // Boss speed
            const bossHealth = 200;    // Boss health
            const bossDamage = 20;
            const bossAttackDamage = 30;  // High attack damage
            const bossAttackSpeed = 0.5; // Attacks twice per second (adjust as needed)

            const newBoss = createBoss(bossX, bossY, bossWidth, bossHeight, bossColor, bossSpeed, bossHealth, bossDamage, bossAttackDamage, bossAttackSpeed);
            enemies.push(newBoss);
            bossFight = true;
        }

        // --- Drawing Functions ---

        function drawPlayer() {
            ctx.fillStyle = player.color;
            ctx.fillRect(player.x, player.y, player.width, player.height);
        }

        function drawPlatform(platform) {
            ctx.fillStyle = platform.color;
            ctx.fillRect(platform.x, platform.y, platform.width, platform.height);
        }

        function drawEnemy(enemy) {
            ctx.fillStyle = enemy.color;
            ctx.fillRect(enemy.x, enemy.y, enemy.width, enemy.height);
        }

        function drawBoss(boss) {
            ctx.fillStyle = boss.color;
            ctx.fillRect(boss.x, boss.y, boss.width, boss.height);

            // Draw boss health bar
            ctx.fillStyle = '#ff0000'; // Red
            ctx.fillRect(boss.x, boss.y - 10, boss.width, 5);
            ctx.fillStyle = '#00ff00'; // Green
            ctx.fillRect(boss.x, boss.y - 10, (boss.health / 200) * boss.width, 5); // Assuming max health is 200
        }

        function drawProjectile(projectile) {
            ctx.fillStyle = projectile.color;
            ctx.fillRect(projectile.x, projectile.y, projectile.width, projectile.height);
        }

        function drawScore() {
            ctx.fillStyle = '#ffffff';
            ctx.font = '1rem "Press Start 2P"';
            ctx.fillText(`Score: ${score}`, 10, 20);
        }
        function drawWave() {
            ctx.fillStyle = '#ffffff';
            ctx.font = '1rem "Press Start 2P"';
            ctx.fillText(`Wave: ${wave}`, 10, 40);
        }

        function drawHealthBar() {
            ctx.fillStyle = '#ffffff';
            ctx.font = '0.75rem "Press Start 2P"';
            ctx.fillText(`Health:`, 10, dimensions.height - 50);

            const barWidth = 100;
            const barHeight = 10;
            ctx.strokeStyle = '#ffffff';
            ctx.strokeRect(10, dimensions.height - 40, barWidth, barHeight);

            ctx.fillStyle = '#00ff00'; // Green
            const healthPercentage = Math.max(0, (player.health / 100)) * barWidth; // Ensure >= 0
            ctx.fillRect(10, dimensions.height - 40, healthPercentage, barHeight);
        }

        // --- Event Listeners ---

        const keys = {};

        document.addEventListener('keydown', (e) => {
            keys[e.key] = true;
            if (e.key === ' ') { // Spacebar for shooting
                handleAttack();
            }
        });

        document.addEventListener('keyup', (e) => {
            keys[e.key] = false;
        });

        restartButton.addEventListener('click', () => {
            resetGame();
            startGame();
        });
        restartButtonWin.addEventListener('click', () => {
            resetGame();
            startGame();
        });

        difficultyButtons.forEach(button => {
            button.addEventListener('click', function() {
                difficulty = this.dataset.difficulty;
                difficultyButtons.forEach(b => b.classList.remove('active'));
                this.classList.add('active');

                // Adjust enemy spawn interval based on difficulty
                switch (difficulty) {
                    case 'easy':
                        enemySpawnInterval = 1500; // Longer interval = fewer enemies
                        break;
                    case 'medium':
                        enemySpawnInterval = 1000; // Medium interval
                        break;
                    case 'hard':
                        enemySpawnInterval = 500; // Shorter interval = more enemies
                        break;
                }
            });
        });
        document.querySelector(`[data-difficulty="${difficulty}"]`).classList.add('active');

        toggleSoundButton.addEventListener('click', () => {
            isSoundEnabled = !isSoundEnabled;
            toggleSoundButton.textContent = isSoundEnabled ? 'Disable Sound' : 'Enable Sound';
        });

        closeInstructionsButton.addEventListener('click', () => {
          instructionsBox.style.display = 'none';
          if (!gameRunning) {
            startGame();
          }
        });

        // --- Game Functions ---
        function updatePlayer() {
            // Horizontal movement
            if (keys['ArrowLeft']) {
                player.x -= player.speed;
            }
            if (keys['ArrowRight']) {
                player.x += player.speed;
            }

            // Jumping
            if (keys['ArrowUp'] && !player.isJumping) {
                player.velocityY = -10;
                player.isJumping = true;
                if (isSoundEnabled) {
                  jumpSynth.triggerAttackRelease('C4', '0.05');
                }
            }

            // Gravity
            player.velocityY += player.gravity;
            player.y += player.velocityY;

            // Collision with platforms
            let onGround = false;
            platforms.forEach(platform => {
                if (checkCollision(player, platform)) {
                    if (player.velocityY > 0 && player.y + player.height <= platform.y + player.velocityY) {
                        player.y = platform.y - player.height;
                        player.velocityY = 0;
                        player.isJumping = false;
                        onGround = true;
                    }
                }
            });

             //handle moving platforms
             platforms.forEach(platform => {
                if (platform.isMoving) {
                    platform.x += platform.direction * platform.moveSpeed;

                    // Reverse direction at boundaries
                    if (platform.x <= 100 || platform.x >= dimensions.width - 100) {
                        platform.direction *= -1;
                    }
                }
            });

            // Keep player within bounds
            if (player.x < 0) {
                player.x = 0;
            }
            if (player.x > dimensions.width - player.width) {
                player.x = dimensions.width - player.width;
            }
            if (!onGround && player.y > dimensions.height) {
                player.y = dimensions.height - player.height;
                player.velocityY = 0;
                player.isJumping = false;
            }
        }

        function updateEnemies() {
            for (let i = 0; i < enemies.length; i++) {
                let enemy = enemies[i];
                if (!enemy.isAlive) continue;

                enemy.x -= enemy.speed;

                // Boss specific actions
                if (enemy.type === 'boss') {
                    // Boss movement - simple back and forth
                    enemy.x += enemy.speed;
                    if (enemy.x <= dimensions.width/2 || enemy.x >= dimensions.width - 100) {
                        enemy.speed *= -1;
                    }

                    // Boss attack
                    enemy.attackTimer += 1/60; // Increment timer (assuming 60 FPS)
                    if (enemy.attackTimer >= 1 / enemy.attackSpeed) { // Time to attack
                        if (isSoundEnabled) {
                            attackSynth.triggerAttackRelease('G4', '0.2');
                        }
                        // Create a projectile
                        const projectileX = enemy.x + enemy.width / 2;
                        const projectileY = enemy.y + enemy.height / 2;
                        enemy.projectiles.push({
                            x: projectileX,
                            y: projectileY,
                            width: enemy.projectileWidth,
                            height: enemy.projectileHeight,
                            speed: 5, // Projectile speed
                            color: enemy.projectileColor,
                            damage: enemy.attackDamage
                        });
                        enemy.attackTimer = 0; // Reset timer
                    }
                    // update projectiles
                    for (let j = 0; j < enemy.projectiles.length; j++){
                        const projectile = enemy.projectiles[j];
                        projectile.x -= projectile.speed;

                         // Check collision with player
                        if (checkCollision(player, projectile)) {
                            player.health -= projectile.damage;
                            if (isSoundEnabled) {
                                hitSynth.triggerAttackRelease('C3', '0.1');
                            }
                            enemy.projectiles.splice(j, 1);
                            if (player.health <= 0) {
                                handleGameOver();
                                return;
                            }
                        }
                        // Remove projectiles that go off-screen
                        if (projectile.x + projectile.width < 0) {
                            enemy.projectiles.splice(j, 1);
                        }
                    }

                } else { //for basic enemies
                     // Check collision with player
                    if (checkCollision(player, enemy)) {
                        player.health -= enemy.damage;
                         if (isSoundEnabled) {
                            hitSynth.triggerAttackRelease('C3', '0.1');
                        }
                        enemies.splice(i, 1);
                        if (player.health <= 0) {
                            handleGameOver();
                            return;
                        }
                    }
                }


                // Remove enemies that go off-screen
                if (enemy.x + enemy.width < 0) {
                    enemies.splice(i, 1);
                }
            }
        }

         function checkBulletCollision(bullet, target) {
            return bullet.x < target.x + target.width &&
                   bullet.x + bullet.width > target.x &&
                   bullet.y < target.y + target.height &&
                   bullet.y + bullet.height > target.y;
        }

        function updateBullets() {
            for (let i = 0; i < bullets.length; i++) {
                bullets[i].x += bullets[i].speed;

                // Check collision with enemies
                for (let j = 0; j < enemies.length; j++) {
                    if (enemies[j].isAlive && checkBulletCollision(bullets[i], enemies[j])) {
                        enemies[j].health -= bullets[i].damage;
                        bullets.splice(i, 1); // Remove the bullet

                        if (enemies[j].health <= 0) {
                            if (isSoundEnabled) {
                                deathSynth.triggerAttackRelease('A2', '0.3');
                            }
                            enemies[j].isAlive = false; // mark enemy as dead.
                            if (enemies[j].type === 'boss'){
                                gameWon = true;
                                handleGameWon();
                                return;
                            }
                            enemies.splice(j, 1); // Remove the enemy
                            score += 10;
                        }
                        break; // Important: Break after handling collision
                    }
                }

                // Remove bullets that go off-screen
                if (bullets[i].x > dimensions.width) {
                    bullets.splice(i, 1);
                }
            }
        }

        function handleAttack() {
            if (gameRunning) {
                // Create a bullet
                let bulletX = player.x + player.width;
                let bulletY = player.y + player.height / 2 - 5; // Adjust for centering
                bullets.push({
                    x: bulletX,
                    y: bulletY,
                    width: 10,  // Bullet width
                    height: 10, // Bullet height
                    speed: bulletSpeed,
                    color: '#ffeb3b', // Yellow
                    damage: bulletDamage
                });
                if (isSoundEnabled) {
                  attackSynth.triggerAttackRelease('D4', '0.1');
                }
            }
        }

        // --- Initialize Game ---

        function initGame() {
            player = createPlayer();
            enemies = [];
            platforms = [
                createPlatform(0, dimensions.height - 20, dimensions.width, 20), // Ground
                createPlatform(200, dimensions.height - 150, 100, 20),       // Floating platform
                createPlatform(400, dimensions.height - 250, 150, 20),
                createPlatform(600, dimensions.height - 100, 100, 20),
                createPlatform(100, dimensions.height/2, 100, 20, '#4caf50'), // Green platform
                createPlatform(350, dimensions.height/3, 100, 20, '#4caf50'),
                createPlatform(550, dimensions.height/4, 100, 20, '#4caf50'),
                createPlatform(0, dimensions.height - 20, dimensions.width, 20), // Ground
                createPlatform(dimensions.width/2 - 50, dimensions.height - 50, 100, 20, '#8d6e63'), // Moving platform
            ];
            platforms[8].isMoving = true; // Make the 9th platform move
            wave = 1;
            score = 0;
            bossFight = false;
            gameWon = false;
            bullets = []; //reset bullets
            gameRunning = false; // Start with game not running, will start on button press
            gameOverOverlay.style.display = 'none';
            gameWonOverlay.style.display = 'none';
            if (animationId) cancelAnimationFrame(animationId);
            enemySpawnInterval = 1000; // Reset interval
        }

        // --- Game Loop ---
        function gameLoop() {
            if (!gameRunning) return;

            // Clear canvas
            ctx.clearRect(0, 0, dimensions.width, dimensions.height);

            // Update game elements
            updatePlayer();
            updateEnemies();
            updateBullets(); //update bullets

            // Draw everything
            drawPlayer();
            platforms.forEach(drawPlatform);
            enemies.forEach(enemy => {
                if (enemy.isAlive){
                    drawEnemy(enemy)
                    if (enemy.type === 'boss'){
                        drawBoss(enemy);
                        enemy.projectiles.forEach(drawProjectile);
                    }
                }
            });
            bullets.forEach(drawProjectile); // Draw bullets
            drawScore();
            drawWave();
            drawHealthBar();

            // Spawn enemies based on wave
            if (enemies.length === 0 && !bossFight) {
                if (wave < 5) {
                    wave++;
                    for (let i = 0; i < wave * 2; i++) { // Increase enemy count per wave
                        spawnEnemy();
                    }
                    if (isSoundEnabled){
                         waveClearSynth.triggerAttackRelease('C5', '0.5');
                    }
                }
                else if (wave === 5) {
                    spawnBoss();
                }
            }

            animationId = requestAnimationFrame(gameLoop);
        }

        function startGame() {
            if (!gameRunning) {
                initGame(); // Reset game state before starting
                gameRunning = true;
                gameOverOverlay.style.display = 'none';
                gameWonOverlay.style.display = 'none';
                gameLoop();
            }
        }

        function handleGameOver() {
            gameRunning = false;
            gameOverOverlay.style.display = 'flex';
            if (isSoundEnabled) {
              gameOverSynth.triggerAttackRelease('C2', '2n');
            }
            if (animationId) cancelAnimationFrame(animationId);
        }

        function handleGameWon(){
            gameRunning = false;
            gameWonOverlay.style.display = 'flex';
             if (isSoundEnabled) {
                  gameWonSynth.triggerAttackRelease('C6', '1n');
                }
            if (animationId) cancelAnimationFrame(animationId);
        }



        // --- Initial Setup ---
        initGame(); // Initialize the game state
        //startGame(); // Start the game when the page loads - removed, now starts on button
    </script>
</body>
</html>

